{"version":3,"sources":["config/constants.js","utils/fetchRides.js","utils/makeLayer.js","RideList/RideList.js","RideList/index.js","Controls/Controls.js","Controls/index.js","App.js","utils/addPathToRides.js","index.js"],"names":["MAPBOX_ACCESS_TOKEN","VIEWPORT_USA","latitude","longitude","zoom","transitionDuration","transitionInterpolator","FlyToInterpolator","NEW","AWS","config","region","credentials","CognitoIdentityCredentials","IdentityPoolId","dynamo","DynamoDB","DocumentClient","makeLayer","data","PathLayer","id","name","path","getColor","color","rounded","widthMinPixels","RideList","rides","selectRide","useState","selected","setSelected","class","length","concat","viewport","map","ride","i","key","className","onClick","dot","String","fromCharCode","Controls","setPath","slice","window","confirm","p","console","log","JSON","stringify","alert","App","setRides","setViewport","useEffect","Promise","resolve","reject","scan","TableName","err","Items","then","updatedRides","newRide","push","pop","addPathToRides","hasPath","r","e","lngLat","onViewportChange","mapboxApiAccessToken","mapStyle","height","width","viewState","layers","ReactDOM","render","document","getElementById"],"mappings":"mVAEaA,G,cAAsB,iGAEtBC,EAAe,CAC1BC,SAAU,GACVC,WAAY,GACZC,KAAM,KACNC,mBAAoB,OACpBC,uBAAwB,IAAIC,KAIjBC,EAAM,c,kBCXnBC,IAAIC,OAAOC,OAAS,YACpBF,IAAIC,OAAOE,YAAc,IAAIH,IAAII,2BAA2B,CACxDC,eAAgB,mDAGpB,IAAMC,EAAS,IAAIN,IAAIO,SAASC,e,aCOzB,SAASC,EAAUC,GAKxB,OAAO,IAAIC,IAAU,CACnBC,GAAIF,EAAKG,KACTH,KAAM,CAAC,CAAEI,KAAMJ,EAAKI,OACpBC,SAAU,kBAAML,EAAKM,OACrBC,SAAS,EACTC,eAAgB,ICtBpB,ICDeC,EDCE,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,MAAOC,EAAiB,EAAjBA,WAAiB,EACVC,qBADU,mBACnCC,EADmC,KACzBC,EADyB,KAG1C,OACE,yBAAKC,MAAM,YACT,0CACGL,EAAMM,QAAU,2CAEjBN,EACGO,OAAO,CAAEd,KAAM,WAAYe,SAAU,KACrCC,KAAI,SAACC,EAAKC,GAAN,OACH,yBACEC,IAAKF,EAAKjB,KACVoB,UAAWF,IAAMR,EAAW,WAAY,IAExC,uBAAGW,QAAS,WACVV,EAAYO,GACZV,EAAWS,KAEVA,EAAKjB,YEnBhBsB,EAAG,WAAOC,OAAOC,aAAa,KAA3B,KCAMC,EDEE,SAAC,GAAD,IAAGV,EAAH,EAAGA,SAAUd,EAAb,EAAaA,KAAMyB,EAAnB,EAAmBA,QAAnB,OACf,yBAAKN,UAAU,YACb,2CACA,uBAAGC,QAAS,kBAAMK,EAAQzB,EAAK0B,MAAM,GAAI,MAAzC,QACCL,EACD,uBAAGD,QAAS,WAAWO,OAAOC,QAAQ,kBAAkBH,EAAQ,MAAhE,SAGCJ,EACD,uBAAGD,QAAS,WACV,IAAMS,EAAI,CACR9B,KAAM,MACNC,OACAc,SAAU,CACRnC,SAAUmC,EAASnC,SACnBC,UAAWkC,EAASlC,UACpBC,KAAMiC,EAASjC,OAGnBiD,QAAQC,IAAIC,KAAKC,UAAUJ,EAAG,GAAI,IAClCK,MAAM,uCAXR,U,yjBEHJ,IAAMjC,EAAW,SAAAQ,GAAQ,OAAIA,EACzB,CAAC,IAAK,EAAG,GACT,CAAC,EAAG,EAAG,IAoEI0B,EAlEH,WAAO,IAAD,EACU3B,mBAAS,IADnB,mBACTF,EADS,KACF8B,EADE,OAEQ5B,mBAAS,IAFjB,mBAETR,EAFS,KAEHyB,EAFG,OAGgBjB,mBAAS9B,GAHzB,mBAGToC,EAHS,KAGCuB,EAHD,KAKhBC,qBAAU,WNTH,IAAIC,SAAQ,SAACC,EAASC,GAC3BjD,EAAOkD,KAAK,CAAEC,UAAW,WAAY,SAACC,EAAKhD,GACrCgD,GAAKH,EAAO,6BAChBD,EAAQ5C,EAAKiD,aMOFC,MAAK,SAAAlD,GAChBwC,EAAS,YAAIxC,SAEd,IAEH0C,qBAAU,WACR,IAAMS,ECxBH,SAAwB/C,EAAMM,EAAOQ,GAC1C,IAAIiC,EAAY,YAAOzC,GACvB,GAAIN,EAAKY,OAAQ,CACf,IAAMoC,EAAU,CACdjD,KAAMd,EACNe,OACAc,YAEER,EAAMA,EAAMM,OAAS,GAAGb,OAASd,EACnC8D,EAAaE,KAAKD,GAElBD,EAAeA,EACdrB,MAAM,GAAI,GACVb,OAAOmC,QAGVD,EAAaG,MAEf,OAAOH,EDMgBI,CAAenD,EAAMM,EAAOQ,GACjDsB,EAASW,KACR,CAAC/C,IAWJ,IAAMoD,IAAYpD,EAAKY,OAEvB,OACE,oCACE,kBAAC,EAAD,CACEN,MAAOA,EACPC,WAfN,SAAoBS,GAClB,IAAM+B,EAAezC,EAAMS,KAAI,SAAAsC,GAAC,YAC3BA,EAD2B,CAE9BnD,MAAOD,EAASoD,EAAEtD,OAASiB,EAAKjB,WAElCqC,EAASW,GACTV,EAAY,EAAD,GAAM3D,EAAN,GAAuBsC,EAAKF,cAWnCsC,GACE,kBAAC,EAAD,CACEtC,SAAUA,EACVd,KAAMA,EACNyB,QAASA,IAIf,kBAAC,IAAD,iBACMX,EADN,CAEEM,QAAS,SAAAkC,GACP7B,EAAQ,GAAD,mBAAMzB,GAAN,CAAYsD,EAAEC,UACrBlB,EAAY,EAAD,GACNvB,EADM,CAETlC,UAAW0E,EAAEC,OAAO,GACpB5E,SAAU2E,EAAEC,OAAO,OAGvBC,iBAAkBnB,EAClBoB,qBAAsBhF,EACtBiF,SAAS,sCACTC,OAAO,QACPC,MAAM,SAEN,kBAAC,IAAD,CACEC,UAAW/C,EACXgD,OAAM,YAAMxD,EAAMS,IAAIpB,SEpEhCoE,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.48010b10.chunk.js","sourcesContent":["import { FlyToInterpolator } from 'react-map-gl';\n\nexport const MAPBOX_ACCESS_TOKEN = 'pk.eyJ1IjoibmF0aGFua2lwcCIsImEiOiJjazNid2k3enIwN2QzM2Nucmp5b3NmaXY0In0.cMIErB8-bLVio-MGSeXlfg';\n\nexport const VIEWPORT_USA = {\n  latitude: 36.0,\n  longitude: -97.0,\n  zoom: 3.25,\n  transitionDuration: 'auto',\n  transitionInterpolator: new FlyToInterpolator(),\n  // transitionEasing: d3.easeCubic\n};\n\nexport const NEW = \"My New Ride\";\n","import AWS from 'aws-sdk';\n\nAWS.config.region = 'us-east-2'; // Region\nAWS.config.credentials = new AWS.CognitoIdentityCredentials({\n    IdentityPoolId: 'us-east-2:1056edee-e9e2-4c61-8f7e-45d31a5ab8a4',\n});\n\nconst dynamo = new AWS.DynamoDB.DocumentClient();\n\nexport function fetchRides() {\n  return new Promise((resolve, reject) => {\n    dynamo.scan({ TableName: 'cyclog' }, (err, data) => {\n      if (err) reject('paths cannot be retrieved');\n      resolve(data.Items);\n    });\n  });\n}\n","import { PathLayer } from '@deck.gl/layers';\n// import { fetchPath } from './fetchPath';\n\n// function getPath(data) {\n//   const setsOf100Points = [];\n//   for (let i = 0; data.path.length > i; i += 100) {\n//     setsOf100Points.push(data.path.slice(i, i+100));\n//   }\n//   return Promise.all(setsOf100Points.map(fetchPath))\n//     .then(paths =>\n//       [{ path: paths.reduce((a,c) => a.concat(c), []) }]\n//     );\n// }\n\nexport function makeLayer(data) {\n  // const path = data.path.length > 1\n  //   ? getPath(data)\n  //   : [{ path: data.path }];\n\n  return new PathLayer({\n    id: data.name,\n    data: [{ path: data.path }],\n    getColor: () => data.color,\n    rounded: true,\n    widthMinPixels: 2,\n  });\n}\n","import React, { useState } from 'react';\n\nconst RideList = ({ rides, selectRide }) => {\n  const [selected, setSelected] = useState();\n\n  return (\n    <div class=\"RideList\">\n      <div>My Rides</div>\n      { !rides.length && <div>Loading...</div> }\n      {\n        rides\n          .concat({ name: 'Show All', viewport: {} })\n          .map((ride,i) => (\n            <div\n              key={ride.name}\n              className={i === selected ? 'selected': ''}\n            >\n              <a onClick={() => {\n                setSelected(i);\n                selectRide(ride);\n              }}>\n                {ride.name}\n              </a>\n            </div>\n          ))\n      }\n    </div>\n  );\n\n};\n\nexport default RideList;\n","import RideList from './RideList';\nexport default RideList;\n","import React from 'react';\n\nconst dot = ` ${String.fromCharCode(183)} `;\n\nconst Controls = ({ viewport, path, setPath }) => (\n  <div className=\"Controls\">\n    <b>Recording...</b>\n    <a onClick={() => setPath(path.slice(0, -1))}>undo</a>\n    {dot}\n    <a onClick={() => {if (window.confirm('are you sure?')) setPath([]);}}>\n      reset\n    </a>\n    {dot}\n    <a onClick={() => {\n      const p = {\n        name: 'foo',\n        path,\n        viewport: {\n          latitude: viewport.latitude,\n          longitude: viewport.longitude,\n          zoom: viewport.zoom,\n        },\n      };\n      console.log(JSON.stringify(p, '', 2))\n      alert('open the console to see your data');\n    }}>\n      done\n    </a>\n  </div>\n);\n\nexport default Controls;\n","import Controls from './Controls';\n\nexport default Controls;\n","import React, { useState, useEffect } from 'react';\nimport MapGL from 'react-map-gl';\nimport DeckGL from '@deck.gl/react';\nimport 'mapbox-gl/dist/mapbox-gl.css';\nimport './App.scss';\nimport { MAPBOX_ACCESS_TOKEN, VIEWPORT_USA } from './config';\nimport { fetchRides, makeLayer, addPathToRides } from './utils';\nimport RideList from './RideList';\nimport Controls from './Controls';\n\nconst getColor = selected => selected\n  ? [221, 0, 0]\n  : [0, 0, 0];\n\nconst App = () => {\n  const [rides, setRides] = useState([]);\n  const [path, setPath] = useState([]);\n  const [viewport, setViewport] = useState(VIEWPORT_USA);\n\n  useEffect(() => {\n    fetchRides().then(data => {\n      setRides([...data]);\n    });\n  }, []);\n\n  useEffect(() => {\n    const updatedRides = addPathToRides(path, rides, viewport);\n    setRides(updatedRides);\n  }, [path]);\n\n  function selectRide(ride) {\n    const updatedRides = rides.map(r => ({\n      ...r,\n      color: getColor(r.name === ride.name),\n    }));\n    setRides(updatedRides);\n    setViewport({ ...VIEWPORT_USA, ...ride.viewport });\n  }\n\n  const hasPath = !!path.length;\n\n  return (\n    <>\n      <RideList\n        rides={rides}\n        selectRide={selectRide}\n      />\n      { hasPath && (\n          <Controls\n            viewport={viewport}\n            path={path}\n            setPath={setPath}\n          />\n        )\n      }\n      <MapGL\n        {...viewport}\n        onClick={e => {\n          setPath([ ...path, e.lngLat]);\n          setViewport({\n            ...viewport,\n            longitude: e.lngLat[0],\n            latitude: e.lngLat[1],\n          });\n        }}\n        onViewportChange={setViewport}\n        mapboxApiAccessToken={MAPBOX_ACCESS_TOKEN}\n        mapStyle=\"mapbox://styles/mapbox/outdoors-v11\"\n        height=\"100vh\"\n        width=\"80vw\"\n      >\n        <DeckGL\n          viewState={viewport}\n          layers={[...rides.map(makeLayer)]}\n        />\n      </MapGL>\n    </>\n  );\n};\n\nexport default App;\n","import { NEW } from '../config/constants';\n\nexport function addPathToRides(path, rides, viewport) {\n  let updatedRides = [...rides];\n  if (path.length) {\n    const newRide = {\n      name: NEW,\n      path,\n      viewport\n    };\n    if (rides[rides.length - 1].name !== NEW) {\n      updatedRides.push(newRide);\n    } else {\n      updatedRides = updatedRides\n      .slice(0, -1)\n      .concat(newRide);\n    }\n  } else {\n    updatedRides.pop();\n  }\n  return updatedRides;\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}